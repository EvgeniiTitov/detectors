import cv2
from typing import List, Tuple, Set
import numpy as np
import os


def draw_bb_for_batch_remember_detected_classes(
        images: List[np.ndarray],
        boxes: List[list],
        colour: Tuple[int] = (193, 17, 146)
) -> Set[str]:
    """
    Draws bounding boxes on a batch of images
    :param images:
    :param boxes: list containing nested lists representing detections for each image in the batch
    :param colour: colour of bounding boxes
    :return:
    """
    assert len(images) == len(boxes), "Number of images and predictions do not match"
    detected_classes = set()
    for image, bbs in zip(images, boxes):
        for bb in bbs:
            cv2.rectangle(image, (bb[0], bb[1]), (bb[2], bb[3]), colour, 4)
            if bb[-1] == "countdown":
                cls_name = "cd"
            elif bb[-1] == "new_world":
                cls_name = "nw"
            elif bb[-1] == "paknsave":
                cls_name = "pkns"
            else:
                cls_name = "ERROR"
            text = "{}_{:.4f}".format(cls_name, bb[-2])
            cv2.putText(image, text, (bb[0], bb[1] - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, colour, thickness=2)
            detected_classes.add(bb[-1])

    return detected_classes


def save_batch_on_disk(
        images: List[np.ndarray],
        video_writer: cv2.VideoWriter = None
) -> None:
    """"""
    for image in images:
        video_writer.write(image)

    return


def create_log_file(payload: dict, save_path: str, filename: str) -> bool:
    if not filename.endswith(".txt"):
        filename = os.path.splitext(filename)[0] + ".txt"
    path_to_file = os.path.join(save_path, filename)
    try:
        with open(path_to_file, mode="w") as file:
            file.write(f"Detection results for: {filename}\n")
            file.write("\nsec: detections\n")
            for k, v in payload.items():
                line_to_write = f" {k}: {' '.join([classname for classname in v])}\n"
                file.write(line_to_write)
    except Exception as e:
        print(f"Failed to write processing results to the log file. Error: {e}")
        return False

    return True
